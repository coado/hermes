import lit
import os
import sys

def isTrue(v):
  """Check whether a string converts to True according to CMake rules"""
  return v and v.upper() in ["1", "ON", "YES", "TRUE", "Y"]

# name: The name of this test suite.
config.name = 'Hermes'

config.test_format = lit.formats.ShTest(True)

# suffixes: A list of file extensions to treat as test files.
config.suffixes = ['.js', '.ts']

# Exclude tests (used to decrease noise with multi-diff refactors).
config.excludes = []

exclude_shermes = False
exclude_debugger = False
exclude_codegen = False
exclude_interpreter = False

if exclude_shermes:
  config.excludes += ['shermes']
if exclude_codegen:
  config.excludes += ['BCGen', 'IRGen', 'Optimizer', 'RA', 'Sema']
if exclude_interpreter:
  config.excludes += [
    'HBC',
    'hermes',
    'debugger',
    'deltaprep',
    'diff',
    'repl',
  ]
if exclude_debugger:
  config.excludes += ['debugger']

# Pass through the C compiler so shermes will use it.
if "CC" in os.environ:
  config.environment["CC"] = os.environ.get("CC")

# If icu_data is present and not empty
if lit_config.params.get("icu_data"):
  config.environment["ICU_DATA"] = lit_config.params["icu_data"]

if lit_config.params.get("coverage"):
  # It would be best to prefix these with the specific binary tool used
  # but there's no way to get that from here.
  config.environment["LLVM_PROFILE_FILE"] = os.path.join(
    lit_config.params["coverage"],
    "hermes-%p.profraw",
  )

# Optionally execute in a different directory so the output files stay there.
if "test_exec_root" in lit_config.params:
    config.test_exec_root=lit_config.params["test_exec_root"]

if not exclude_interpreter:
  config.available_features.add("interpreter")
if isTrue(lit_config.params.get("debugger_enabled")):
  config.available_features.add("debugger")
# Only enable the JIT if it is force-on, since we don't otherwise know whether
# it is available.
if lit_config.params.get("jit_enabled") == "2":
  config.available_features.add("jit")
if isTrue(lit_config.params.get("check_native_stack")):
  config.available_features.add("check_native_stack")
if isTrue(lit_config.params.get("intl_enabled")):
  config.available_features.add("intl")
if isTrue(lit_config.params.get("regexp_unicode_properties_enabled")):
  config.available_features.add("regexp_unicode_properties")

if isTrue(lit_config.params.get("exception_on_oom_enabled")):
  config.available_features.add("exception_on_oom")

if lit_config.params.get("profiler") == "BB":
    config.available_features.add("basic_block_profiler")

if isTrue(lit_config.params.get("slow_debug")):
  config.available_features.add("slow_debug")

if isTrue(lit_config.params.get("debug_options")):
  config.available_features.add("debug_options")

if lit_config.params.get("gc") == "MALLOC":
  config.available_features.add("gc_malloc")
if lit_config.params.get("gc") == "HADES":
  config.available_features.add("gc_hades")

if isTrue(lit_config.params.get("is_fbcode")):
  config.available_features.add("fbcode")

if lit_config.params.get("is_fbcode_coverage"):
  config.available_features.add("fbcode_coverage")

if isTrue(lit_config.params.get("ubsan")):
  config.available_features.add("ubsan")
if isTrue(lit_config.params.get("asan", "")):
  config.available_features.add("asan")

if sys.platform.startswith('cygwin'):
  lit_config.fatal('Running Hermes LIT tests in cygwin Python is not supported. ' +
    'When running LIT tests on Windows, please use regular Python.')
if lit_config.isWindows:
  config.available_features.add("windows")
  if not lit_config.getBashPath():
    lit_config.fatal('Running Hermes LIT tests in CMD.exe is not supported. ' +
      'When running LIT tests on Windows, please make sure bash is available. ' +
      'For example, you may invoke the test in cygwin, or add bash to your PATH.')

if sys.platform == "darwin":
  config.available_features.add("apple")
if sys.platform == "linux":
  config.available_features.add("linux")

qemu_run_prefix = lit_config.params.get("qemu_run_prefix", "")
if len(qemu_run_prefix) > 0:
  config.available_features.add("qemu_mode")

if isTrue(lit_config.params.get("unicode_lite")):
  config.available_features.add("unicode_lite")

# Note
# 1. substitutions are applied in order.
#    %hermesc must appear before %hermes, or else %hermes will substitute *inside* %hermesc
# 2. \ are replaced with /.
#    On Windows, paths may be separated by either \ or /.
#    However, when path containing \ are substituted into RUN line, it's not automatically
#    escaped, and does not work.

def substitute(config, template_name, param_name = None,  extra = ""):
  if not param_name:
    param_name = template_name
  config.substitutions.append((f"%{template_name}", qemu_run_prefix + " " + lit_config.params[param_name].replace('\\', '/') + " " + extra))

qemu_run_prefix += " "
if lit_config.params.get("FileCheckOrRegen"):
  substitute(config, "FileCheckOrRegen")
if lit_config.params.get("FileCheck"):
  substitute(config, "FileCheck", extra = os.environ.get("LIT_FILECHECK_FLAGS", ""))
if lit_config.params.get("hermesc"):
  substitute(config, "hermesc")
if lit_config.params.get("hermes"):
  substitute(config, "hermes", extra = os.environ.get("LIT_HERMES_EXTRA_FLAGS", ""))
if lit_config.params.get("shermes"):
  substitute(config, "shermes", extra = os.environ.get("LIT_SHERMES_EXTRA_FLAGS", ""))
if lit_config.params.get("hdb"):
  substitute(config, "hdb")
if lit_config.params.get("hbcdump"):
  substitute(config, "hbcdump")
if lit_config.params.get("hbc_deltaprep"):
  substitute(config, "hbc-deltaprep", param_name = "hbc_deltaprep")
if lit_config.params.get("hbc_diff"):
  substitute(config, "hbc-diff", param_name = "hbc_diff")
if lit_config.params.get("dependency_extractor"):
  substitute(config, "dependency-extractor", param_name = "dependency_extractor")
